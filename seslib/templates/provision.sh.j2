set -ex

DEPLOYMENT_SCRIPT="$0"

function err_report {
    set +x
    local line_number="$1"
    echo "Error in sesdev deployment script trapped!"
    echo "=> hostname: $(hostname)"
    echo "=> script: $DEPLOYMENT_SCRIPT"
    echo "=> line number: $line_number"
    echo "Bailing out!"
    exit 0
}

# ensure Vagrant doesn't destroy the master node when the script fails
trap 'err_report $LINENO' ERR

# do not limit coredump size
ulimit -c unlimited

ls -lR /home/vagrant

# populate /etc/hosts
{% for _node in nodes %}
{% if _node.public_address %}
echo "{{ _node.public_address }} {{ _node.fqdn }} {{ _node.name }}" >> /etc/hosts
{% endif %}
{% endfor %}

# distribute SSH keys
cat /home/vagrant/.ssh/{{ ssh_key_name }}.pub >> /home/vagrant/.ssh/authorized_keys
[ ! -e "/root/.ssh" ] && mkdir /root/.ssh
chmod 600 /home/vagrant/.ssh/{{ ssh_key_name }}
cp /home/vagrant/.ssh/{{ ssh_key_name }}* /root/.ssh/
ln -s /root/.ssh/{{ ssh_key_name }} /root/.ssh/id_rsa
ln -s /root/.ssh/{{ ssh_key_name }}.pub /root/.ssh/id_rsa.pub
cat /root/.ssh/{{ ssh_key_name }}.pub >> /root/.ssh/authorized_keys

# disable host checking when SSHing within the cluster
cat >> /root/.ssh/config << 'EOF'
Host *
   StrictHostKeyChecking no
EOF

# set hostname
{% if fqdn %}
hostnamectl set-hostname {{ node.fqdn }}
{% else %}
hostnamectl set-hostname {{ node.name }}
{% endif %}

{% if version in ['octopus', 'ses7', 'pacific'] %}
# persist the journal
sed -i -e 's/#Storage=auto/Storage=persistent/' /etc/systemd/journald.conf
systemctl restart systemd-journald
{% endif %}{# version in ['octopus', 'ses7', 'pacific'] #}

{% if not provision %}
set +x
echo "Stopping the deployment now because the --no-provision option was given"
exit 0
{% endif %}{# not provision #}

# if --ssd option was given, set rotational flag on first additional disk
{% if ssd %}
if [ -f /sys/block/vdb/queue/rotational ] ; then
    echo "0" > /sys/block/vdb/queue/rotational
fi
{% endif %}{# ssd #}

{% if package_manager == 'zypper' %}
{% include "zypper.j2" ignore missing %}
{% elif package_manager == 'apt' %}
{% include "apt.j2" ignore missing %}
{% elif package_manager == 'yum' %}
{% include "yum.j2" ignore missing %}
{% elif package_manager == 'dnf' %}
{% include "dnf.j2" ignore missing %}
{% endif %}{# package_manager == 'zypper' #}

# include helper scripts
{% include "helper_scripts.j2" %}

# sync clocks if needed
{% include "sync_clocks.j2" %}

# apparmor
{% if apparmor %}
aa-status || true
{% else %}
aa-teardown
echo "Possibly changing GRUB configuration to disable apparmor persistently"
GRUB_APPARMOR_BEFORE="$(grep ^GRUB_CMDLINE_LINUX_DEFAULT /etc/default/grub)"
sed -i -e 's/^GRUB_CMDLINE_LINUX_DEFAULT=""$/GRUB_CMDLINE_LINUX_DEFAULT="apparmor=0"/' /etc/default/grub
GRUB_APPARMOR_AFTER="$(grep ^GRUB_CMDLINE_LINUX_DEFAULT /etc/default/grub)"
if [ "$GRUB_APPARMOR_AFTER" ] && [ "$GRUB_APPARMOR_BEFORE" != "$GRUB_APPARMOR_AFTER" ] ; then
    grub2-mkconfig -o /boot/grub2/grub.cfg
else
    echo "GRUB configuration did not change; not persisting it"
fi
aa-status || true
{% endif %}{# apparmor #}

{% if os != 'sles-12-sp3' %}
source /etc/os-release
if [[ "$ID_LIKE" =~ "suse" ]] ; then
    # enable coredump capturing
    sysctl -w kernel.core_pattern="|/usr/lib/systemd/systemd-coredump %P %u %g s %t %c %e"
    sysctl kernel.core_pattern
    cat <<EOF >>/etc/systemd/coredump.conf
ProcessSizeMax={{ ram }}G
ExternalSizeMax={{ ram }}G
JournalSizeMax={{ ram }}G
EOF
    cat /etc/systemd/coredump.conf
    systemctl enable systemd-coredump.socket
    systemctl start systemd-coredump.socket
fi
{% endif %}{# os != 'sles-12-sp3' #}

# deployment state machine

# DeepSea
{% if deploy_salt and deployment_tool == "deepsea" %}
{% include "salt/provision.sh.j2" %}
{% if node == master %}
{% include "salt/deepsea/deepsea_deployment.sh.j2" %}
{% include "salt/qa_test.j2" %}
{% endif %}{# node == master #}

# SUMA
{% elif suma and node == suma %}
{% include "salt/provision.sh.j2" %}
{% include "salt/suma/suma_deployment.sh.j2" %}

# ceph-salt (Day 1) + cephadm (Day 2)
{% elif deploy_salt and deployment_tool == "cephadm" %}
{% include "salt/provision.sh.j2" %}
{% if node == master %}
{% include "salt/ceph-salt/deployment_day_1.sh.j2" %}
{% include "cephadm/deployment_day_2.sh.j2" %}
{% include "salt/qa_test.j2" %}
{% endif %}{# node == master #}

# caasp4
{% elif version == 'caasp4' %}
{% include "caasp/provision.sh.j2" %}

# make check
{% elif version == 'makecheck' %}
{% include "makecheck/provision.sh.j2" %}

# upstream Ceph on Ubuntu
{% elif os.startswith('ubuntu') %}
{% include "ubuntu/provision.sh.j2" %}

{% endif %}{# end of deploy state machine #}
